name: Deploy on Kubernetes

on:
  workflow_dispatch:

env:
  IMAGE_NAME: nodeappdemo:${{ github.sha }}
  REGISTRY_DEV: '${{ secrets.ACR_DEV_NAME }}.azurecr.io'
  REGISTRY_QA: '${{ secrets.ACR_QA_NAME }}.azurecr.io'
  REGISTRY_PROD: '${{ secrets.ACR_PROD_NAME }}.azurecr.io'

jobs:
  build-node-app-image:

    runs-on: ubuntu-latest
    environment: DEV

    steps:
      - name: Checkout source code 
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2   
              
      - name: Build docker image
        run: |                          
          echo ${{ secrets.SP_PASSWD }} | docker login ${{ secrets.REGISTRY_SERVER }} --username ${{ secrets.SP_APP_ID }} --password-stdin
          docker build -t ${{ env.REGISTRY_DEV }}/${{ env.IMAGE_NAME }} .          
        working-directory: ./src  
    
      - name: Deploy to container registry
        run: |
          docker push ${{ env.REGISTRY_DEV }}/${{ env.IMAGE_NAME }}

  deploy-dev:          
    
    needs: build-node-app-image

    runs-on: ubuntu-latest
    environment: DEV

    steps:

      - name: Checkout source code 
        uses: actions/checkout@v3

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup kubectl
        id: install-kubectl
        uses: azure/setup-kubectl@v3
  
      - uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.31'  
          
      - name: Set AKS context
        id: set-context
        uses: azure/aks-set-context@v3
        with:
          resource-group: '${{ secrets.RG_DEV_NAME }}'
          cluster-name: '${{ secrets.AKS_DEV_NAME }}' 
          admin: false
          use-kubelogin: true
          
      - uses: cschleiden/replace-tokens@v1
        name: Replace image in deployment
        with:
          tokenPrefix: '__'
          tokenSuffix: '__'
          files: '["**/deployment.yml"]'
        env:
          image: ${{ env.REGISTRY_DEV }}/${{ env.IMAGE_NAME }}
          version: ${{ github.sha }}
          environment: 'dev'

      - name: Deploy to AKS
        id: deploy-aks
        uses: Azure/k8s-deploy@v4
        with:
          namespace: 'default'
          manifests: |
             k8s/deployment.yml
          pull-images: false 
          
  push-image-qa:
     
    needs: deploy-dev

    runs-on: ubuntu-latest
    environment: QA

    steps:

      - name: Checkout source code 
        uses: actions/checkout@v3
        
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Push build image to QA
        run: |                          
          az acr import --name ${{ env.REGISTRY_QA }} --source ${{ env.REGISTRY_DEV }}/${{ env.IMAGE_NAME }} --image ${{ env.IMAGE_NAME }}
        working-directory: ./src     
        
  deploy-qa:          
    
    needs: push-image-qa

    runs-on: ubuntu-latest

    steps:

      - name: Checkout source code 
        uses: actions/checkout@v3

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup kubectl
        id: install-kubectl
        uses: azure/setup-kubectl@v3
  
      - uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.31'  
          
      - name: Set AKS context
        id: set-context
        uses: azure/aks-set-context@v3
        with:
          resource-group: '${{ secrets.RG_QA_NAME }}'
          cluster-name: '${{ secrets.AKS_QA_NAME }}' 
          admin: false
          use-kubelogin: true
          
      - uses: cschleiden/replace-tokens@v1
        name: Replace image in deployment
        with:
          tokenPrefix: '__'
          tokenSuffix: '__'
          files: '["**/deployment.yml"]'
        env:
          image: ${{ env.REGISTRY_QA }}/${{ env.IMAGE_NAME }}
          version: ${{ github.sha }}
          environment: 'qa'

      - name: Deploy to AKS
        id: deploy-aks
        uses: Azure/k8s-deploy@v4
        with:
          namespace: 'default'
          manifests: |
              k8s/deployment.yml
          pull-images: false         


  push-image-prod:

    needs: deploy-qa

    runs-on: ubuntu-latest
    environment: PROD

    steps:

      - name: Checkout source code 
        uses: actions/checkout@v3
        
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Push build image to PROD
        run: |                          
          az acr import --name ${{ env.REGISTRY_PROD }} --source ${{ env.REGISTRY_QA }}/${{ env.IMAGE_NAME }} --image ${{ env.IMAGE_NAME }}
        working-directory: ./src     
                
  deploy-prod:          
    
    needs: push-image-prod

    runs-on: ubuntu-latest

    steps:

      - name: Checkout source code 
        uses: actions/checkout@v3

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup kubectl
        id: install-kubectl
        uses: azure/setup-kubectl@v3
  
      - uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.31'  
          
      - name: Set AKS context
        id: set-context
        uses: azure/aks-set-context@v3
        with:
          resource-group: '${{ secrets.RG_PROD_NAME }}'
          cluster-name: '${{ secrets.AKS_PROD_NAME }}' 
          admin: false
          use-kubelogin: true
          
      - uses: cschleiden/replace-tokens@v1
        name: Replace image in deployment
        with:
          tokenPrefix: '__'
          tokenSuffix: '__'
          files: '["**/deployment.yml"]'
        env:
          image: ${{ env.REGISTRY_PROD }}/${{ env.IMAGE_NAME }}
          version: ${{ github.sha }}
          environment: 'prod'

      - name: Deploy to AKS
        id: deploy-aks
        uses: Azure/k8s-deploy@v4
        with:
          namespace: 'default'
          manifests: |
              k8s/deployment.yml
          pull-images: false                 